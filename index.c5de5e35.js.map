{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["'use strict';\nvar $a5fd07fa01589658$exports = {};\n'use strict';\nlet $a5fd07fa01589658$var$currentState = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = $a5fd07fa01589658$var$currentState){\n        this.initialStateSaved = JSON.parse(JSON.stringify(initialState));\n        $a5fd07fa01589658$var$currentState = initialState;\n        this.score = 0;\n        this.status = 'idle';\n        this.gameStarted = false;\n        this.boardChanged = false;\n    }\n    isMovePossibleHorisontally(state) {\n        return this.hasSameNeighbours(state);\n    }\n    isMovePossibleVertically(state) {\n        const rotated = this.rotateArrayClockwise(state);\n        return this.hasSameNeighbours(rotated);\n    }\n    hasSameNeighbours(array) {\n        let sameValueDetected = false;\n        for (const row of Array.from(array)){\n            const filtered = row.filter((value)=>value > 0);\n            for(let i = 1; i < filtered.length; i++)if (filtered[i] === filtered[i - 1]) sameValueDetected = true;\n            if (row.some((value)=>value === 0)) sameValueDetected = true;\n        }\n        return sameValueDetected;\n    }\n    // from chat gpt\n    rotateArrayClockwise(array) {\n        return array[0].map((_, colIndex)=>array.map((row)=>row[colIndex]).reverse());\n    }\n    rotateArrayCounterClockwise(array) {\n        return array[0].map((_, colIndex)=>array.map((row)=>row[colIndex])).reverse();\n    }\n    addRandom() {\n        const emptyCells = [];\n        const options = [\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            2,\n            4\n        ];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if ($a5fd07fa01589658$var$currentState[i][j] === 0) emptyCells.push([\n                i,\n                j\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const randomCell = emptyCells.length === 1 ? 0 : Math.floor(Math.random() * emptyCells.length);\n        const randomOption = Math.floor(Math.random() * options.length);\n        const [row, col] = emptyCells[randomCell];\n        $a5fd07fa01589658$var$currentState[row][col] = options[randomOption];\n    }\n    moveCells(direction) {\n        const result = [];\n        const state = direction === 'up' ? this.rotateArrayCounterClockwise($a5fd07fa01589658$var$currentState) : direction === 'down' ? this.rotateArrayClockwise($a5fd07fa01589658$var$currentState) : [\n            ...$a5fd07fa01589658$var$currentState\n        ];\n        for (const row of state){\n            const rowCopy = [\n                ...row\n            ].filter((value)=>value > 0);\n            if (direction === 'left') {\n                const rowResult = this.mergeRowLeft(rowCopy);\n                result.push(rowResult);\n            }\n            if (direction === 'right') {\n                const rowResult = this.mergeRowLeft(rowCopy.reverse());\n                result.push(rowResult.reverse());\n            }\n            if (direction === 'up') {\n                const rowResult = this.mergeRowLeft(rowCopy);\n                result.push(rowResult);\n            }\n            if (direction === 'down') {\n                const rowResult = this.mergeRowLeft(rowCopy);\n                result.push(rowResult);\n            }\n        }\n        const finalResult = direction === 'up' ? this.rotateArrayClockwise(result) : direction === 'down' ? this.rotateArrayCounterClockwise(result) : result;\n        this.boardChanged = JSON.stringify($a5fd07fa01589658$var$currentState) !== JSON.stringify(finalResult);\n        $a5fd07fa01589658$var$currentState = finalResult;\n        return finalResult;\n    }\n    mergeRowLeft(row) {\n        const rowResult = [\n            0,\n            0,\n            0,\n            0\n        ];\n        let count = 0;\n        while(count < row.length){\n            if (row[count] === row[count + 1]) {\n                rowResult[count] = row[count] + row[count + 1];\n                this.score += rowResult[count];\n                row.splice(count, 1);\n                row.push(0);\n            } else rowResult[count] = row[count];\n            count += 1;\n        }\n        rowResult.length = 4;\n        return rowResult;\n    }\n    moveLeft() {\n        if (this.gameStarted) {\n            this.moveCells('left');\n            if (this.boardChanged) this.addRandom();\n        }\n    }\n    moveRight() {\n        if (this.gameStarted) {\n            this.moveCells('right');\n            if (this.boardChanged) this.addRandom();\n        }\n    }\n    moveUp() {\n        if (this.gameStarted) {\n            this.moveCells('up');\n            if (this.boardChanged) this.addRandom();\n        }\n    }\n    moveDown() {\n        if (this.gameStarted) {\n            this.moveCells('down');\n            if (this.boardChanged) this.addRandom();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return $a5fd07fa01589658$var$currentState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if ($a5fd07fa01589658$var$currentState.flat().some((value)=>value === 2048)) return 'win';\n        if (!this.isMovePossibleHorisontally($a5fd07fa01589658$var$currentState) && !this.isMovePossibleVertically($a5fd07fa01589658$var$currentState)) return 'lose';\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.gameStarted = true;\n        this.addRandom();\n        this.addRandom();\n        this.status = 'playing';\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        if (!this.initialStateSaved.flat().every((value)=>value === 0)) $a5fd07fa01589658$var$currentState = [\n            ...this.initialStateSaved\n        ];\n        else {\n            $a5fd07fa01589658$var$currentState = [\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ],\n                [\n                    0,\n                    0,\n                    0,\n                    0\n                ]\n            ];\n            this.addRandom();\n            this.addRandom();\n        }\n        this.gameStarted = true;\n        this.score = 0;\n        this.status = 'idle';\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n// const game = new Game();\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startButton = document.querySelector('.start');\nconst $09e991522ca7e64e$var$scoreScreen = document.querySelector('.game-score');\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector('.message-lose');\nconst $09e991522ca7e64e$var$winMessage = document.querySelector('.message-win');\nconst $09e991522ca7e64e$var$startMessage = document.querySelector('.message.message-start');\n$09e991522ca7e64e$var$startButton.addEventListener('click', ()=>{\n    if (!$09e991522ca7e64e$var$game.gameStarted) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$drawCells();\n        $09e991522ca7e64e$var$startMessage.hidden = true;\n        $09e991522ca7e64e$var$startButton.textContent = 'restart';\n        $09e991522ca7e64e$var$startButton.classList.remove('start');\n        $09e991522ca7e64e$var$startButton.classList.add('restart');\n        $09e991522ca7e64e$var$loseMessage.style.display = 'none';\n        $09e991522ca7e64e$var$winMessage.style.display = 'none';\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$scoreScreen.textContent = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$loseMessage.style.display = 'none';\n        $09e991522ca7e64e$var$winMessage.style.display = 'none';\n        $09e991522ca7e64e$var$drawCells();\n    }\n});\ndocument.addEventListener('keydown', (e)=>{\n    if ($09e991522ca7e64e$var$game.gameStarted === false) {\n        e.preventDefault();\n        return;\n    }\n    if (e.key === 'ArrowLeft') {\n        $09e991522ca7e64e$var$game.moveLeft();\n        $09e991522ca7e64e$var$drawCells();\n    }\n    if (e.key === 'ArrowRight') {\n        $09e991522ca7e64e$var$game.moveRight();\n        $09e991522ca7e64e$var$drawCells();\n    }\n    if (e.key === 'ArrowUp') {\n        $09e991522ca7e64e$var$game.moveUp();\n        $09e991522ca7e64e$var$drawCells();\n    }\n    if (e.key === 'ArrowDown') {\n        $09e991522ca7e64e$var$game.moveDown();\n        $09e991522ca7e64e$var$drawCells();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === 'win') {\n        e.preventDefault();\n        $09e991522ca7e64e$var$winMessage.style.display = 'block';\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === 'idle') e.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() === 'lose') {\n        e.preventDefault();\n        $09e991522ca7e64e$var$loseMessage.style.display = 'block';\n    }\n    $09e991522ca7e64e$var$scoreScreen.textContent = $09e991522ca7e64e$var$game.getScore();\n});\nfunction $09e991522ca7e64e$var$drawCells() {\n    const table = document.querySelector('.game-field tbody');\n    const rows = table.getElementsByClassName('field-row');\n    Array.from(rows).forEach((row, rowIndex)=>{\n        const cells = row.getElementsByClassName('field-cell');\n        Array.from(cells).forEach((cell)=>{\n            cell.textContent = '';\n        });\n        const currentState = $09e991522ca7e64e$var$game.getState();\n        Array.from(cells).forEach((cell, cellIndex)=>{\n            if (currentState[rowIndex][cellIndex] !== 0) {\n                cell.textContent = currentState[rowIndex][cellIndex];\n                for (const classItem of cell.classList)if (classItem !== 'field-cell') cell.classList.remove(classItem);\n                cell.classList.add(`field-cell--${currentState[rowIndex][cellIndex]}`);\n            } else {\n                for (const classItem of cell.classList)if (classItem !== 'field-cell') cell.classList.remove(classItem);\n            }\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.c5de5e35.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n// const game = new Game();\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst scoreScreen = document.querySelector('.game-score');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message.message-start');\n\nstartButton.addEventListener('click', () => {\n  if (!game.gameStarted) {\n    game.start();\n    drawCells();\n    startMessage.hidden = true;\n    startButton.textContent = 'restart';\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    loseMessage.style.display = 'none';\n    winMessage.style.display = 'none';\n  } else {\n    game.restart();\n    scoreScreen.textContent = game.getScore();\n    loseMessage.style.display = 'none';\n    winMessage.style.display = 'none';\n    drawCells();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.gameStarted === false) {\n    e.preventDefault();\n\n    return;\n  }\n\n  if (e.key === 'ArrowLeft') {\n    game.moveLeft();\n    drawCells();\n  }\n\n  if (e.key === 'ArrowRight') {\n    game.moveRight();\n    drawCells();\n  }\n\n  if (e.key === 'ArrowUp') {\n    game.moveUp();\n    drawCells();\n  }\n\n  if (e.key === 'ArrowDown') {\n    game.moveDown();\n    drawCells();\n  }\n\n  if (game.getStatus() === 'win') {\n    e.preventDefault();\n    winMessage.style.display = 'block';\n  }\n\n  if (game.getStatus() === 'idle') {\n    e.preventDefault();\n  }\n\n  if (game.getStatus() === 'lose') {\n    e.preventDefault();\n    loseMessage.style.display = 'block';\n  }\n\n  scoreScreen.textContent = game.getScore();\n});\n\nfunction drawCells() {\n  const table = document.querySelector('.game-field tbody');\n  const rows = table.getElementsByClassName('field-row');\n\n  Array.from(rows).forEach((row, rowIndex) => {\n    const cells = row.getElementsByClassName('field-cell');\n\n    Array.from(cells).forEach((cell) => {\n      cell.textContent = '';\n    });\n\n    const currentState = game.getState();\n\n    Array.from(cells).forEach((cell, cellIndex) => {\n      if (currentState[rowIndex][cellIndex] !== 0) {\n        cell.textContent = currentState[rowIndex][cellIndex];\n\n        for (const classItem of cell.classList) {\n          if (classItem !== 'field-cell') {\n            cell.classList.remove(classItem);\n          }\n        }\n\n        cell.classList.add(`field-cell--${currentState[rowIndex][cellIndex]}`);\n      } else {\n        for (const classItem of cell.classList) {\n          if (classItem !== 'field-cell') {\n            cell.classList.remove(classItem);\n          }\n        }\n      }\n    });\n  });\n}\n","'use strict';\n\nlet currentState = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(initialState = currentState) {\n    this.initialStateSaved = JSON.parse(JSON.stringify(initialState));\n    currentState = initialState;\n    this.score = 0;\n    this.status = 'idle';\n    this.gameStarted = false;\n    this.boardChanged = false;\n  }\n\n  isMovePossibleHorisontally(state) {\n    return this.hasSameNeighbours(state);\n  }\n\n  isMovePossibleVertically(state) {\n    const rotated = this.rotateArrayClockwise(state);\n\n    return this.hasSameNeighbours(rotated);\n  }\n\n  hasSameNeighbours(array) {\n    let sameValueDetected = false;\n\n    for (const row of Array.from(array)) {\n      const filtered = row.filter((value) => value > 0);\n\n      for (let i = 1; i < filtered.length; i++) {\n        if (filtered[i] === filtered[i - 1]) {\n          sameValueDetected = true;\n        }\n      }\n\n      if (row.some((value) => value === 0)) {\n        sameValueDetected = true;\n      }\n    }\n\n    return sameValueDetected;\n  }\n\n  // from chat gpt\n  rotateArrayClockwise(array) {\n    return array[0].map(\n      (_, colIndex) => array.map((row) => row[colIndex]).reverse(),\n      // eslint-disable-next-line function-paren-newline\n    );\n  }\n\n  rotateArrayCounterClockwise(array) {\n    return array[0]\n      .map((_, colIndex) => array.map((row) => row[colIndex]))\n      .reverse();\n  }\n\n  addRandom() {\n    const emptyCells = [];\n    const options = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (currentState[i][j] === 0) {\n          emptyCells.push([i, j]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomCell =\n      emptyCells.length === 1\n        ? 0\n        : Math.floor(Math.random() * emptyCells.length);\n    const randomOption = Math.floor(Math.random() * options.length);\n\n    const [row, col] = emptyCells[randomCell];\n\n    currentState[row][col] = options[randomOption];\n  }\n\n  moveCells(direction) {\n    const result = [];\n\n    const state =\n      direction === 'up'\n        ? this.rotateArrayCounterClockwise(currentState)\n        : direction === 'down'\n          ? this.rotateArrayClockwise(currentState)\n          : [...currentState];\n\n    for (const row of state) {\n      const rowCopy = [...row].filter((value) => value > 0);\n\n      if (direction === 'left') {\n        const rowResult = this.mergeRowLeft(rowCopy);\n\n        result.push(rowResult);\n      }\n\n      if (direction === 'right') {\n        const rowResult = this.mergeRowLeft(rowCopy.reverse());\n\n        result.push(rowResult.reverse());\n      }\n\n      if (direction === 'up') {\n        const rowResult = this.mergeRowLeft(rowCopy);\n\n        result.push(rowResult);\n      }\n\n      if (direction === 'down') {\n        const rowResult = this.mergeRowLeft(rowCopy);\n\n        result.push(rowResult);\n      }\n    }\n\n    const finalResult =\n      direction === 'up'\n        ? this.rotateArrayClockwise(result)\n        : direction === 'down'\n          ? this.rotateArrayCounterClockwise(result)\n          : result;\n\n    this.boardChanged =\n      JSON.stringify(currentState) !== JSON.stringify(finalResult);\n\n    currentState = finalResult;\n\n    return finalResult;\n  }\n\n  mergeRowLeft(row) {\n    const rowResult = [0, 0, 0, 0];\n    let count = 0;\n\n    while (count < row.length) {\n      if (row[count] === row[count + 1]) {\n        rowResult[count] = row[count] + row[count + 1];\n        this.score += rowResult[count];\n        row.splice(count, 1);\n        row.push(0);\n      } else {\n        rowResult[count] = row[count];\n      }\n      count += 1;\n    }\n\n    rowResult.length = 4;\n\n    return rowResult;\n  }\n\n  moveLeft() {\n    if (this.gameStarted) {\n      this.moveCells('left');\n\n      if (this.boardChanged) {\n        this.addRandom();\n      }\n    }\n  }\n\n  moveRight() {\n    if (this.gameStarted) {\n      this.moveCells('right');\n\n      if (this.boardChanged) {\n        this.addRandom();\n      }\n    }\n  }\n\n  moveUp() {\n    if (this.gameStarted) {\n      this.moveCells('up');\n\n      if (this.boardChanged) {\n        this.addRandom();\n      }\n    }\n  }\n\n  moveDown() {\n    if (this.gameStarted) {\n      this.moveCells('down');\n\n      if (this.boardChanged) {\n        this.addRandom();\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return currentState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (currentState.flat().some((value) => value === 2048)) {\n      return 'win';\n    }\n\n    if (\n      !this.isMovePossibleHorisontally(currentState) &&\n      !this.isMovePossibleVertically(currentState)\n    ) {\n      return 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.gameStarted = true;\n    this.addRandom();\n    this.addRandom();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    if (!this.initialStateSaved.flat().every((value) => value === 0)) {\n      currentState = [...this.initialStateSaved];\n    } else {\n      currentState = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n\n      this.addRandom();\n      this.addRandom();\n    }\n\n    this.gameStarted = true;\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$currentState","$09e991522ca7e64e$var$game","constructor","initialState","initialStateSaved","JSON","parse","stringify","score","status","gameStarted","boardChanged","isMovePossibleHorisontally","state","hasSameNeighbours","isMovePossibleVertically","rotated","rotateArrayClockwise","array","sameValueDetected","row","Array","from","filtered","filter","value","i","length","some","map","_","colIndex","reverse","rotateArrayCounterClockwise","addRandom","emptyCells","options","j","push","randomCell","Math","floor","random","randomOption","col","moveCells","direction","result","rowCopy","rowResult","mergeRowLeft","finalResult","count","splice","moveLeft","moveRight","moveUp","moveDown","getScore","getState","getStatus","flat","start","restart","every","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$scoreScreen","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$drawCells","table","getElementsByClassName","forEach","rowIndex","cells","cell","textContent","currentState","cellIndex","classItem","classList","remove","add","addEventListener","style","display","hidden","e","preventDefault","key"],"version":3,"file":"index.c5de5e35.js.map"}